#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ARQV30 Enhanced v3.0 - Enhanced AI Manager
Gerenciador de IA com hierarquia OpenRouter: Grok-4 ‚Üí Gemini-2.0 ‚Üí DeepSeek-R1
ZERO SIMULA√á√ÉO - Apenas modelos reais funcionais
"""

import os
import logging
import asyncio
import json
from typing import Dict, List, Optional, Any, Union
from datetime import datetime
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente
load_dotenv()

# Import do novo gerenciador de hierarquia
from .openrouter_hierarchy_manager import openrouter_manager, generate_ai_response, generate_ai_response_sync

logger = logging.getLogger(__name__)

class EnhancedAIManager:
    """Gerenciador de IA aprimorado com hierarquia OpenRouter"""

    def __init__(self):
        """Inicializa o gerenciador aprimorado com hierarquia OpenRouter"""
        self.openrouter_manager = openrouter_manager
        self.search_orchestrator = None
        
        # Importar search orchestrator se dispon√≠vel
        try:
            from .real_search_orchestrator import RealSearchOrchestrator
            self.search_orchestrator = RealSearchOrchestrator()
            logger.info("‚úÖ Search Orchestrator carregado")
        except ImportError:
            logger.warning("‚ö†Ô∏è Search Orchestrator n√£o dispon√≠vel")

        logger.info("ü§ñ Enhanced AI Manager inicializado com hierarquia OpenRouter")

    def generate_response(
        self,
        prompt: str,
        model: str = "google/gemini-2.0-flash-exp:free",
        max_tokens: int = 1000,
        temperature: float = 0.7
    ) -> Dict[str, Any]:
        """Gera resposta s√≠ncrona usando o modelo especificado"""
        try:
            # Usa o generate_ai_response_sync do openrouter_hierarchy_manager
            response = generate_ai_response_sync(
                prompt=prompt,
                model_override=model,
                max_tokens=max_tokens,
                temperature=temperature
            )
            
            # Verifica se response √© string ou dict
            if isinstance(response, str):
                return {
                    'success': True,
                    'content': response,
                    'model': model,
                    'tokens_used': 0,
                    'processing_time': 0
                }
            elif response and isinstance(response, dict) and response.get('success'):
                return {
                    'success': True,
                    'content': response.get('content', ''),
                    'model': response.get('model', model),
                    'tokens_used': response.get('tokens_used', 0),
                    'processing_time': response.get('processing_time', 0)
                }
            else:
                logger.error(f"‚ùå Falha na gera√ß√£o de resposta: {response}")
                error_msg = 'Erro desconhecido'
                if isinstance(response, dict):
                    error_msg = response.get('error', 'Erro desconhecido')
                return {
                    'success': False,
                    'content': 'Erro ao gerar resposta',
                    'error': error_msg
                }
                
        except Exception as e:
            logger.error(f"‚ùå Erro na gera√ß√£o de resposta: {e}")
            return {
                'success': False,
                'content': 'Erro interno ao gerar resposta',
                'error': str(e)
            }

    async def generate_text(
        self,
        prompt: str,
        system_prompt: Optional[str] = None,
        max_tokens: Optional[int] = None,
        temperature: Optional[float] = None,
        model_override: Optional[str] = None
    ) -> str:
        """
        Gera texto usando a hierarquia OpenRouter
        
        Args:
            prompt: Prompt do usu√°rio
            system_prompt: Prompt do sistema (opcional)
            max_tokens: M√°ximo de tokens (opcional)
            temperature: Temperatura (opcional)
            model_override: For√ßar modelo espec√≠fico (opcional)
        
        Returns:
            String com a resposta da IA
        """
        try:
            return await generate_ai_response(
                prompt=prompt,
                system_prompt=system_prompt,
                max_tokens=max_tokens,
                temperature=temperature,
                model_override=model_override
            )
        except (ConnectionError, TimeoutError) as e:
            logger.error(f"‚ùå Erro de conex√£o ao gerar texto: {str(e)}")
            raise
        except (ValueError, KeyError) as e:
            logger.error(f"‚ùå Erro de par√¢metros ao gerar texto: {str(e)}")
            raise
        except Exception as e:
            logger.error(f"‚ùå Erro inesperado ao gerar texto: {str(e)}")
            raise
    
    def generate_text_sync(
        self,
        prompt: str,
        system_prompt: Optional[str] = None,
        max_tokens: Optional[int] = None,
        temperature: Optional[float] = None,
        model_override: Optional[str] = None
    ) -> str:
        """Vers√£o s√≠ncrona da gera√ß√£o de texto"""
        try:
            return generate_ai_response_sync(
                prompt=prompt,
                system_prompt=system_prompt,
                max_tokens=max_tokens,
                temperature=temperature,
                model_override=model_override
            )
        except (ConnectionError, TimeoutError) as e:
            logger.error(f"‚ùå Erro de conex√£o ao gerar texto (sync): {str(e)}")
            raise
        except (ValueError, KeyError) as e:
            logger.error(f"‚ùå Erro de par√¢metros ao gerar texto (sync): {str(e)}")
            raise
        except Exception as e:
            logger.error(f"‚ùå Erro inesperado ao gerar texto (sync): {str(e)}")
            raise

    async def generate_with_active_search(
        self,
        prompt: str,
        context: str = "",
        session_id: str = None,
        max_search_iterations: int = 3,
        preferred_model: str = None,
        min_processing_time: int = 0
    ) -> str:
        """
        Gera conte√∫do com busca ativa usando hierarquia OpenRouter
        """
        logger.info(f"üîç Iniciando gera√ß√£o com busca ativa (min_time: {min_processing_time}s)")
        
        # Registrar tempo de in√≠cio para garantir tempo m√≠nimo
        start_time = datetime.now()

        # Prepara prompt com instru√ß√µes de busca e contexto
        enhanced_prompt = f"""
{prompt}

CONTEXTO DISPON√çVEL:
{context}

INSTRU√á√ïES ESPECIAIS:
- Analise o contexto fornecido detalhadamente
- Busque dados atualizados sobre o mercado brasileiro
- Procure por estat√≠sticas, tend√™ncias e casos reais
- Forne√ßa insights profundos baseados nos dados dispon√≠veis
- Use informa√ß√µes reais e atualizadas sempre que poss√≠vel

IMPORTANTE: Gere uma an√°lise completa e profissional baseando-se no contexto fornecido.
"""

        # Sistema prompt para busca ativa
        system_prompt = """Voc√™ √© um especialista em an√°lise de mercado e tend√™ncias digitais. 
        Sua fun√ß√£o √© gerar an√°lises profundas e insights valiosos baseados nos dados fornecidos.
        Sempre forne√ßa informa√ß√µes precisas, atualizadas e acion√°veis.
        Se precisar de informa√ß√µes adicionais, indique claramente quais dados seriam √∫teis."""

        try:
            # Usar hierarquia OpenRouter com modelo preferido se especificado
            model_override = None
            if preferred_model:
                if preferred_model == "grok":
                    model_override = "x-ai/grok-4-fast:free"
                elif preferred_model == "gemini":
                    model_override = "google/gemini-2.0-flash-exp:free"
                elif preferred_model == "deepseek":
                    model_override = "deepseek/deepseek-r1-0528:free"
            
            logger.info(f"ü§ñ Usando hierarquia OpenRouter com modelo: {model_override or 'autom√°tico'}")
            
            # Gerar resposta usando hierarquia
            response = await self.generate_text(
                prompt=enhanced_prompt,
                system_prompt=system_prompt,
                max_tokens=4000,
                temperature=0.7,
                model_override=model_override
            )
            
            # Garantir tempo m√≠nimo de processamento se especificado
            if min_processing_time > 0:
                elapsed_time = (datetime.now() - start_time).total_seconds()
                if elapsed_time < min_processing_time:
                    remaining_time = min_processing_time - elapsed_time
                    logger.info(f"‚è±Ô∏è Aguardando {remaining_time:.1f}s para completar tempo m√≠nimo")
                    await asyncio.sleep(remaining_time)
            
            logger.info("‚úÖ Gera√ß√£o com busca ativa conclu√≠da")
            return response
            
        except Exception as e:
            logger.error(f"‚ùå Erro na gera√ß√£o com busca ativa: {e}")
            # Fallback simples
            try:
                return await self.generate_text(enhanced_prompt, system_prompt)
            except Exception as e2:
                logger.error(f"‚ùå Erro no fallback: {e2}")
                raise

    async def analyze_content(
        self,
        content: str,
        analysis_type: str = "comprehensive",
        target_audience: str = "general",
        model_preference: str = None
    ) -> str:
        """
        Analisa conte√∫do usando hierarquia OpenRouter
        
        Args:
            content: Conte√∫do para an√°lise
            analysis_type: Tipo de an√°lise (comprehensive, viral, market, etc.)
            target_audience: P√∫blico-alvo
            model_preference: Prefer√™ncia de modelo
        
        Returns:
            An√°lise detalhada do conte√∫do
        """
        system_prompt = f"""Voc√™ √© um especialista em an√°lise de conte√∫do digital e marketing.
        Sua fun√ß√£o √© analisar conte√∫do de forma {analysis_type} para o p√∫blico {target_audience}.
        Forne√ßa insights acion√°veis, tend√™ncias identificadas e recomenda√ß√µes estrat√©gicas."""
        
        analysis_prompt = f"""
Analise o seguinte conte√∫do de forma {analysis_type}:

CONTE√öDO:
{content}

P√öBLICO-ALVO: {target_audience}

FORNE√áA:
1. An√°lise detalhada do conte√∫do
2. Pontos fortes e fracos identificados
3. Potencial viral e engajamento
4. Recomenda√ß√µes de melhoria
5. Estrat√©gias de distribui√ß√£o
6. Insights de mercado relevantes

Seja espec√≠fico, pr√°tico e acion√°vel em suas recomenda√ß√µes.
"""
        
        try:
            return await self.generate_text(
                prompt=analysis_prompt,
                system_prompt=system_prompt,
                max_tokens=3000,
                temperature=0.7,
                model_override=model_preference
            )
        except Exception as e:
            logger.error(f"‚ùå Erro na an√°lise de conte√∫do: {e}")
            raise

    async def generate_insights(
        self,
        data: Dict[str, Any],
        insight_type: str = "market_trends",
        depth: str = "deep"
    ) -> str:
        """
        Gera insights baseados em dados usando hierarquia OpenRouter
        
        Args:
            data: Dados para an√°lise
            insight_type: Tipo de insight desejado
            depth: Profundidade da an√°lise (shallow, medium, deep)
        
        Returns:
            Insights gerados
        """
        system_prompt = f"""Voc√™ √© um analista de dados especializado em {insight_type}.
        Sua fun√ß√£o √© gerar insights {depth} baseados nos dados fornecidos.
        Sempre forne√ßa an√°lises precisas, tend√™ncias identificadas e recomenda√ß√µes acion√°veis."""
        
        data_str = json.dumps(data, indent=2, ensure_ascii=False)
        
        insights_prompt = f"""
Analise os seguintes dados e gere insights {depth} sobre {insight_type}:

DADOS:
{data_str}

FORNE√áA:
1. Principais tend√™ncias identificadas
2. Padr√µes e correla√ß√µes importantes
3. Oportunidades de mercado
4. Riscos e desafios
5. Recomenda√ß√µes estrat√©gicas
6. Previs√µes baseadas nos dados

Seja espec√≠fico, use n√∫meros quando relevante e forne√ßa insights acion√°veis.
"""
        
        try:
            return await self.generate_text(
                prompt=insights_prompt,
                system_prompt=system_prompt,
                max_tokens=4000,
                temperature=0.6
            )
        except Exception as e:
            logger.error(f"‚ùå Erro na gera√ß√£o de insights: {e}")
            raise

    def get_status(self) -> Dict[str, Any]:
        """Retorna status do gerenciador"""
        return {
            "openrouter_status": self.openrouter_manager.get_status(),
            "search_orchestrator_available": self.search_orchestrator is not None,
            "timestamp": datetime.now().isoformat()
        }

    def reset_failed_models(self):
        """Reativa modelos falhados"""
        self.openrouter_manager.reset_failed_models()
        logger.info("‚úÖ Modelos falhados reativados")

# Inst√¢ncia global para uso em todo o projeto
enhanced_ai_manager = EnhancedAIManager()

# Fun√ß√µes de conveni√™ncia para uso direto
async def generate_ai_text(
    prompt: str,
    system_prompt: Optional[str] = None,
    max_tokens: Optional[int] = None,
    temperature: Optional[float] = None,
    model_override: Optional[str] = None
) -> str:
    """Fun√ß√£o de conveni√™ncia para gera√ß√£o de texto"""
    return await enhanced_ai_manager.generate_text(
        prompt=prompt,
        system_prompt=system_prompt,
        max_tokens=max_tokens,
        temperature=temperature,
        model_override=model_override
    )

def generate_ai_text_sync(
    prompt: str,
    system_prompt: Optional[str] = None,
    max_tokens: Optional[int] = None,
    temperature: Optional[float] = None,
    model_override: Optional[str] = None
) -> str:
    """Fun√ß√£o de conveni√™ncia s√≠ncrona para gera√ß√£o de texto"""
    return enhanced_ai_manager.generate_text_sync(
        prompt=prompt,
        system_prompt=system_prompt,
        max_tokens=max_tokens,
        temperature=temperature,
        model_override=model_override
    )

if __name__ == "__main__":
    # Teste b√°sico
    async def test():
        try:
            manager = EnhancedAIManager()
            
            response = await manager.generate_text(
                prompt="Explique brevemente o que √© intelig√™ncia artificial",
                system_prompt="Voc√™ √© um especialista em tecnologia"
            )
            print(f"Resposta: {response}")
            
            # Status
            status = manager.get_status()
            print(f"Status: {json.dumps(status, indent=2, default=str)}")
            
        except Exception as e:
            print(f"Erro no teste: {e}")
    
    asyncio.run(test())