#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
M√ìDULO 1: Gerenciador de Estado de Sess√£o
Objetivo: Manter registro em mem√≥ria do estado das an√°lises, com persist√™ncia de estado em disco 
para sobreviver a restarts do servidor.

‚ö†Ô∏è AVISO DE PRIVACIDADE:
Este m√≥dulo armazena dados localmente, mas o processamento de IA ocorre via Google Gemini Cloud.
"""

import os
import json
import threading
import logging
from datetime import datetime
from typing import Dict, Any, Optional, List
from pathlib import Path

logger = logging.getLogger(__name__)

class SessionStateManager:
    """
    Singleton Thread-Safe para gerenciar estado das sess√µes de an√°lise.
    
    Funcionalidades:
    - Singleton Thread-Safe: Garante uma √∫nica inst√¢ncia, mesmo em ambientes concorrentes
    - Persist√™ncia de Estado: Salva estado em config.json dentro de analyses_data/<session_id>
    - Registro de Sess√£o: Cria novas sess√µes com estado inicial 'idle' 
    - Controle de Status: Atualiza status (idle, running, paused) e etapa atual
    - Consulta de Estado: Retorna status sem campos n√£o serializ√°veis (threads)
    """
    
    _instance = None
    _lock = threading.Lock()

    def __new__(cls):
        if cls._instance is None:
            with cls._lock:
                if cls._instance is None:
                    cls._instance = super(SessionStateManager, cls).__new__(cls)
                    cls._instance.sessions = {}
                    cls._instance.analyses_base_dir = os.getenv('ANALYSES_BASE_DIR', 'analyses_data')
                    cls._instance._load_sessions_from_disk()
                    logger.info("‚úÖ SessionStateManager inicializado como Singleton")
        return cls._instance

    def _load_sessions_from_disk(self):
        """Carrega sess√µes existentes do disco no startup."""
        if not os.path.exists(self.analyses_base_dir):
            os.makedirs(self.analyses_base_dir, exist_ok=True)
            logger.info(f"üìÅ Diret√≥rio de an√°lises criado: {self.analyses_base_dir}")
            return
        
        loaded_sessions = 0
        for session_id in os.listdir(self.analyses_base_dir):
            session_dir = os.path.join(self.analyses_base_dir, session_id)
            if not os.path.isdir(session_dir):
                continue
                
            config_path = os.path.join(session_dir, "config.json")
            if not os.path.exists(config_path):
                logger.warning(f"‚ö†Ô∏è Sess√£o {session_id} sem config.json, ignorando")
                continue
                
            try:
                with open(config_path, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                
                # Carrega apenas estado essencial (n√£o salva threads)
                self.sessions[session_id] = {
                    'session_id': session_id,
                    'status': config.get('status', 'idle'),
                    'current_step': config.get('current_step', 0),
                    'created_at': config.get('created_at', datetime.now().isoformat()),
                    'updated_at': datetime.now().isoformat(),
                    'query': config.get('query', ''),
                    'module_results': config.get('module_results', {}),
                    'analysis_progress': config.get('analysis_progress', {}),
                    'error_log': config.get('error_log', []),
                    'config_path': config_path,
                    'session_dir': session_dir
                }
                loaded_sessions += 1
                
            except Exception as e:
                logger.error(f"‚ùå Erro ao carregar sess√£o {session_id}: {e}")
                continue
        
        logger.info(f"üìÑ {loaded_sessions} sess√µes carregadas do disco")

    def register_session(self, session_id: str, query: str = "", initial_data: Optional[Dict[str, Any]] = None) -> bool:
        """
        Registra uma nova sess√£o de an√°lise.
        
        Args:
            session_id: Identificador √∫nico da sess√£o
            query: Query inicial de pesquisa 
            initial_data: Dados iniciais opcionais
            
        Returns:
            bool: True se criado com sucesso
        """
        try:
            with self._lock:
                if session_id in self.sessions:
                    logger.warning(f"‚ö†Ô∏è Sess√£o {session_id} j√° existe")
                    return False
                
                # Cria diret√≥rio da sess√£o
                session_dir = os.path.join(self.analyses_base_dir, session_id)
                os.makedirs(session_dir, exist_ok=True)
                
                # Estado inicial
                session_data = {
                    'session_id': session_id,
                    'status': 'idle',
                    'current_step': 0,
                    'created_at': datetime.now().isoformat(),
                    'updated_at': datetime.now().isoformat(),
                    'query': query,
                    'module_results': {},
                    'analysis_progress': {
                        'total_steps': 0,
                        'completed_steps': 0,
                        'current_module': '',
                        'progress_percentage': 0
                    },
                    'error_log': [],
                    'config_path': os.path.join(session_dir, "config.json"),
                    'session_dir': session_dir
                }
                
                # Adiciona dados iniciais se fornecidos
                if initial_data:
                    session_data.update(initial_data)
                
                # Salva em mem√≥ria
                self.sessions[session_id] = session_data
                
                # Persiste no disco
                self._save_session_to_disk(session_id)
                
                logger.info(f"‚úÖ Nova sess√£o registrada: {session_id}")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao registrar sess√£o {session_id}: {e}")
            return False

    def set_status(self, session_id: str, status: str, step: Optional[int] = None, 
                   additional_data: Optional[Dict[str, Any]] = None) -> bool:
        """
        Atualiza o status e etapa de uma sess√£o.
        
        Args:
            session_id: ID da sess√£o
            status: Novo status (idle, running, paused, completed, error)
            step: Etapa atual (opcional)
            additional_data: Dados adicionais (opcional)
            
        Returns:
            bool: True se atualizado com sucesso
        """
        try:
            with self._lock:
                if session_id not in self.sessions:
                    logger.warning(f"‚ö†Ô∏è Sess√£o {session_id} n√£o encontrada")
                    return False
                
                # Atualiza dados
                self.sessions[session_id]['status'] = status
                self.sessions[session_id]['updated_at'] = datetime.now().isoformat()
                
                if step is not None:
                    self.sessions[session_id]['current_step'] = step
                
                if additional_data:
                    self.sessions[session_id].update(additional_data)
                
                # Persiste no disco
                self._save_session_to_disk(session_id)
                
                logger.info(f"üîÑ Status da sess√£o {session_id} atualizado para: {status}")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao atualizar status da sess√£o {session_id}: {e}")
            return False

    def get_status(self, session_id: str) -> Optional[Dict[str, Any]]:
        """
        Retorna o status de uma sess√£o sem campos n√£o serializ√°veis.
        
        Args:
            session_id: ID da sess√£o
            
        Returns:
            Dict com status da sess√£o ou None se n√£o encontrada
        """
        try:
            with self._lock:
                if session_id not in self.sessions:
                    return None
                
                # Cria c√≥pia sem campos n√£o serializ√°veis
                session_copy = self.sessions[session_id].copy()
                
                # Remove campos que n√£o devem ser expostos
                excluded_fields = ['thread', 'lock', 'session_dir', 'config_path']
                for field in excluded_fields:
                    session_copy.pop(field, None)
                
                return session_copy
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao obter status da sess√£o {session_id}: {e}")
            return None

    def update_progress(self, session_id: str, current_module: str, 
                       completed_steps: int, total_steps: int) -> bool:
        """
        Atualiza o progresso de an√°lise de uma sess√£o.
        
        Args:
            session_id: ID da sess√£o
            current_module: M√≥dulo atual sendo processado
            completed_steps: Passos conclu√≠dos
            total_steps: Total de passos
            
        Returns:
            bool: True se atualizado com sucesso
        """
        try:
            with self._lock:
                if session_id not in self.sessions:
                    return False
                
                progress_percentage = (completed_steps / total_steps * 100) if total_steps > 0 else 0
                
                self.sessions[session_id]['analysis_progress'] = {
                    'total_steps': total_steps,
                    'completed_steps': completed_steps,
                    'current_module': current_module,
                    'progress_percentage': round(progress_percentage, 2)
                }
                
                self.sessions[session_id]['updated_at'] = datetime.now().isoformat()
                
                # Persiste no disco
                self._save_session_to_disk(session_id)
                
                return True
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao atualizar progresso da sess√£o {session_id}: {e}")
            return False

    def add_error_log(self, session_id: str, error_message: str, module_name: str = "") -> bool:
        """
        Adiciona entrada no log de erros da sess√£o.
        
        Args:
            session_id: ID da sess√£o
            error_message: Mensagem de erro
            module_name: Nome do m√≥dulo onde ocorreu o erro
            
        Returns:
            bool: True se adicionado com sucesso
        """
        try:
            with self._lock:
                if session_id not in self.sessions:
                    return False
                
                error_entry = {
                    'timestamp': datetime.now().isoformat(),
                    'module': module_name,
                    'message': error_message
                }
                
                if 'error_log' not in self.sessions[session_id]:
                    self.sessions[session_id]['error_log'] = []
                
                self.sessions[session_id]['error_log'].append(error_entry)
                
                # Mant√©m apenas os √∫ltimos 50 erros
                if len(self.sessions[session_id]['error_log']) > 50:
                    self.sessions[session_id]['error_log'] = self.sessions[session_id]['error_log'][-50:]
                
                self.sessions[session_id]['updated_at'] = datetime.now().isoformat()
                
                # Persiste no disco
                self._save_session_to_disk(session_id)
                
                return True
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao adicionar log de erro para sess√£o {session_id}: {e}")
            return False

    def list_sessions(self, status_filter: Optional[str] = None) -> List[Dict[str, Any]]:
        """
        Lista todas as sess√µes, opcionalmente filtradas por status.
        
        Args:
            status_filter: Status para filtrar (opcional)
            
        Returns:
            Lista de sess√µes
        """
        try:
            with self._lock:
                sessions_list = []
                
                for session_id, session_data in self.sessions.items():
                    if status_filter and session_data.get('status') != status_filter:
                        continue
                    
                    # Cria c√≥pia sem campos internos
                    session_copy = session_data.copy()
                    excluded_fields = ['thread', 'lock', 'session_dir', 'config_path']
                    for field in excluded_fields:
                        session_copy.pop(field, None)
                    
                    sessions_list.append(session_copy)
                
                # Ordena por data de cria√ß√£o (mais recente primeiro)
                sessions_list.sort(key=lambda x: x.get('created_at', ''), reverse=True)
                
                return sessions_list
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao listar sess√µes: {e}")
            return []

    def delete_session(self, session_id: str) -> bool:
        """
        Remove uma sess√£o da mem√≥ria e disco.
        
        Args:
            session_id: ID da sess√£o a ser removida
            
        Returns:
            bool: True se removida com sucesso
        """
        try:
            with self._lock:
                if session_id not in self.sessions:
                    logger.warning(f"‚ö†Ô∏è Sess√£o {session_id} n√£o encontrada para remo√ß√£o")
                    return False
                
                session_dir = self.sessions[session_id].get('session_dir')
                
                # Remove da mem√≥ria
                del self.sessions[session_id]
                
                # Remove diret√≥rio do disco se existir
                if session_dir and os.path.exists(session_dir):
                    import shutil
                    shutil.rmtree(session_dir)
                    logger.info(f"üóëÔ∏è Diret√≥rio da sess√£o removido: {session_dir}")
                
                logger.info(f"‚úÖ Sess√£o {session_id} removida com sucesso")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao remover sess√£o {session_id}: {e}")
            return False

    def _save_session_to_disk(self, session_id: str):
        """Salva dados da sess√£o no disco."""
        try:
            if session_id not in self.sessions:
                return
            
            session_data = self.sessions[session_id].copy()
            
            # Remove campos n√£o serializ√°veis
            excluded_fields = ['thread', 'lock', 'session_dir', 'config_path']
            for field in excluded_fields:
                session_data.pop(field, None)
            
            config_path = self.sessions[session_id]['config_path']
            
            with open(config_path, 'w', encoding='utf-8') as f:
                json.dump(session_data, f, ensure_ascii=False, indent=2)
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao salvar sess√£o {session_id} no disco: {e}")

    def get_session_directory(self, session_id: str) -> Optional[str]:
        """
        Retorna o diret√≥rio da sess√£o.
        
        Args:
            session_id: ID da sess√£o
            
        Returns:
            Caminho do diret√≥rio ou None se n√£o encontrado
        """
        if session_id in self.sessions:
            return self.sessions[session_id].get('session_dir')
        return None

# Inst√¢ncia global singleton
session_manager = SessionStateManager()