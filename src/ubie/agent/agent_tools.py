#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
M√ìDULO 4: Cinto de Ferramentas do Agente
Objetivo: Fornecer fun√ß√µes para intera√ß√£o com o sistema local, como leitura de arquivos, 
pausa/retomada de fluxos e ajuste de par√¢metros.

‚ö†Ô∏è AVISO DE PRIVACIDADE:
Este m√≥dulo processa dados localmente, mas o processamento de IA ocorre via Google Gemini Cloud.

üîí SEGURAN√áA:
- Todos os caminhos s√£o validados para evitar directory traversal
- Somente arquivos dentro da pasta da sess√£o podem ser acessados
"""

import os
import json
import logging
from pathlib import Path
from typing import Dict, Any, Optional, List
from datetime import datetime

from .session_state_manager import session_manager

logger = logging.getLogger(__name__)

class AgentTools:
    """
    Conjunto de ferramentas para o agente interagir com o sistema local.
    
    Fun√ß√µes principais:
    - get_system_status(session_id): Retorna o status da sess√£o
    - pause_workflow(session_id): Pausa a an√°lise em execu√ß√£o
    - resume_workflow(session_id): Prepara a sess√£o para ser retomada
    - get_file_content(session_id, filename): L√™ conte√∫do de arquivos locais com valida√ß√£o
    - refine_search_query(session_id, new_query): Atualiza a query de busca no config.json
    """
    
    def __init__(self):
        """Inicializa as ferramentas do agente."""
        self.analyses_base_dir = os.getenv('ANALYSES_BASE_DIR', 'analyses_data')
        logger.info("üõ†Ô∏è AgentTools inicializado")

    def get_system_status(self, session_id: str) -> Dict[str, Any]:
        """
        Retorna o status completo da sess√£o de an√°lise.
        
        Args:
            session_id: ID da sess√£o
            
        Returns:
            Dicion√°rio com status detalhado da sess√£o
        """
        try:
            # Status b√°sico da sess√£o
            session_status = session_manager.get_status(session_id)
            
            if not session_status:
                return {
                    'status': 'error',
                    'message': f'Sess√£o {session_id} n√£o encontrada',
                    'session_exists': False
                }
            
            # Informa√ß√µes adicionais do sistema
            session_dir = session_manager.get_session_directory(session_id)
            
            # Lista arquivos da sess√£o
            session_files = []
            if session_dir and os.path.exists(session_dir):
                try:
                    for file in os.listdir(session_dir):
                        file_path = os.path.join(session_dir, file)
                        if os.path.isfile(file_path):
                            file_info = {
                                'name': file,
                                'size': os.path.getsize(file_path),
                                'modified': datetime.fromtimestamp(os.path.getmtime(file_path)).isoformat()
                            }
                            session_files.append(file_info)
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Erro ao listar arquivos da sess√£o: {e}")
            
            # Verifica sa√∫de do sistema
            system_health = self._check_system_health()
            
            return {
                'status': 'success',
                'session_status': session_status,
                'session_directory': session_dir,
                'session_files': session_files,
                'system_health': system_health,
                'timestamp': datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao obter status do sistema para sess√£o {session_id}: {e}")
            return {
                'status': 'error',
                'message': str(e),
                'session_id': session_id
            }

    def pause_workflow(self, session_id: str, reason: str = "Pausado pelo usu√°rio") -> Dict[str, Any]:
        """
        Pausa a an√°lise em execu√ß√£o para a sess√£o especificada.
        
        Args:
            session_id: ID da sess√£o
            reason: Motivo da pausa
            
        Returns:
            Dicion√°rio com resultado da opera√ß√£o
        """
        try:
            # Verifica se sess√£o existe
            current_status = session_manager.get_status(session_id)
            if not current_status:
                return {
                    'status': 'error',
                    'message': f'Sess√£o {session_id} n√£o encontrada'
                }
            
            # Verifica se est√° executando
            if current_status.get('status') != 'running':
                return {
                    'status': 'warning',
                    'message': f'Sess√£o {session_id} n√£o est√° executando. Status atual: {current_status.get("status")}'
                }
            
            # Pausa a sess√£o
            success = session_manager.set_status(
                session_id, 
                'paused',
                additional_data={
                    'pause_reason': reason,
                    'paused_at': datetime.now().isoformat()
                }
            )
            
            if success:
                # Adiciona entrada no log
                session_manager.add_error_log(
                    session_id,
                    f"Workflow pausado: {reason}",
                    "AgentTools"
                )
                
                logger.info(f"‚è∏Ô∏è Workflow pausado para sess√£o {session_id}: {reason}")
                
                return {
                    'status': 'success',
                    'message': f'Workflow pausado com sucesso',
                    'session_id': session_id,
                    'reason': reason
                }
            else:
                return {
                    'status': 'error',
                    'message': 'Falha ao pausar workflow'
                }
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao pausar workflow para sess√£o {session_id}: {e}")
            return {
                'status': 'error',
                'message': str(e)
            }

    def resume_workflow(self, session_id: str) -> Dict[str, Any]:
        """
        Prepara a sess√£o para ser retomada (muda status para idle).
        
        Args:
            session_id: ID da sess√£o
            
        Returns:
            Dicion√°rio com resultado da opera√ß√£o
        """
        try:
            # Verifica se sess√£o existe
            current_status = session_manager.get_status(session_id)
            if not current_status:
                return {
                    'status': 'error',
                    'message': f'Sess√£o {session_id} n√£o encontrada'
                }
            
            # Verifica se est√° pausada
            if current_status.get('status') != 'paused':
                return {
                    'status': 'warning',
                    'message': f'Sess√£o {session_id} n√£o est√° pausada. Status atual: {current_status.get("status")}'
                }
            
            # Prepara para retomar (status idle)
            success = session_manager.set_status(
                session_id, 
                'idle',
                additional_data={
                    'resume_prepared_at': datetime.now().isoformat(),
                    'ready_to_resume': True
                }
            )
            
            if success:
                logger.info(f"‚ñ∂Ô∏è Sess√£o {session_id} preparada para retomar")
                
                return {
                    'status': 'success',
                    'message': 'Sess√£o preparada para retomar. Use o sistema principal para reiniciar a an√°lise.',
                    'session_id': session_id,
                    'next_step': current_status.get('current_step', 0)
                }
            else:
                return {
                    'status': 'error',
                    'message': 'Falha ao preparar sess√£o para retomar'
                }
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao preparar retomada para sess√£o {session_id}: {e}")
            return {
                'status': 'error',
                'message': str(e)
            }

    def get_file_content(self, session_id: str, filename: str, max_size: int = 1024*1024) -> Dict[str, Any]:
        """
        L√™ conte√∫do de arquivos locais com valida√ß√£o de caminho de seguran√ßa.
        
        Args:
            session_id: ID da sess√£o
            filename: Nome do arquivo (sem caminho)
            max_size: Tamanho m√°ximo em bytes (padr√£o: 1MB)
            
        Returns:
            Dicion√°rio com conte√∫do do arquivo ou erro
        """
        try:
            # Valida√ß√£o de seguran√ßa - evita directory traversal
            if not self._is_safe_filename(filename):
                return {
                    'status': 'error',
                    'message': 'Nome de arquivo inv√°lido ou n√£o seguro'
                }
            
            # Verifica se sess√£o existe
            session_dir = session_manager.get_session_directory(session_id)
            if not session_dir:
                return {
                    'status': 'error',
                    'message': f'Sess√£o {session_id} n√£o encontrada'
                }
            
            # Constr√≥i caminho seguro
            file_path = os.path.join(session_dir, filename)
            
            # Valida√ß√£o adicional - garante que o arquivo est√° dentro da pasta da sess√£o
            if not self._is_path_within_session(file_path, session_dir):
                return {
                    'status': 'error',
                    'message': 'Acesso negado: arquivo fora da pasta da sess√£o'
                }
            
            # Verifica se arquivo existe
            if not os.path.exists(file_path):
                return {
                    'status': 'error',
                    'message': f'Arquivo {filename} n√£o encontrado na sess√£o'
                }
            
            # Verifica tamanho do arquivo
            file_size = os.path.getsize(file_path)
            if file_size > max_size:
                return {
                    'status': 'error',
                    'message': f'Arquivo muito grande ({file_size} bytes). M√°ximo: {max_size} bytes'
                }
            
            # L√™ conte√∫do do arquivo
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                file_info = {
                    'name': filename,
                    'size': file_size,
                    'modified': datetime.fromtimestamp(os.path.getmtime(file_path)).isoformat(),
                    'encoding': 'utf-8'
                }
                
                logger.info(f"üìÑ Arquivo lido: {filename} ({file_size} bytes)")
                
                return {
                    'status': 'success',
                    'content': content,
                    'file_info': file_info,
                    'session_id': session_id
                }
                
            except UnicodeDecodeError:
                # Tenta ler como bin√°rio se UTF-8 falhar
                with open(file_path, 'rb') as f:
                    binary_content = f.read()
                
                return {
                    'status': 'success',
                    'content': binary_content.hex(),  # Retorna em hexadecimal
                    'file_info': {
                        'name': filename,
                        'size': file_size,
                        'modified': datetime.fromtimestamp(os.path.getmtime(file_path)).isoformat(),
                        'encoding': 'binary'
                    },
                    'session_id': session_id,
                    'note': 'Arquivo bin√°rio retornado em formato hexadecimal'
                }
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao ler arquivo {filename} da sess√£o {session_id}: {e}")
            return {
                'status': 'error',
                'message': str(e)
            }

    def refine_search_query(self, session_id: str, new_query: str) -> Dict[str, Any]:
        """
        Atualiza a query de busca no config.json da sess√£o.
        
        Args:
            session_id: ID da sess√£o
            new_query: Nova query de busca
            
        Returns:
            Dicion√°rio com resultado da opera√ß√£o
        """
        try:
            # Valida√ß√£o da query
            if not new_query or not new_query.strip():
                return {
                    'status': 'error',
                    'message': 'Query n√£o pode estar vazia'
                }
            
            new_query = new_query.strip()
            
            # Verifica se sess√£o existe
            session_dir = session_manager.get_session_directory(session_id)
            if not session_dir:
                return {
                    'status': 'error',
                    'message': f'Sess√£o {session_id} n√£o encontrada'
                }
            
            # Atualiza no session manager
            success = session_manager.set_status(
                session_id,
                session_manager.get_status(session_id).get('status', 'idle'),
                additional_data={
                    'query': new_query,
                    'query_updated_at': datetime.now().isoformat()
                }
            )
            
            if success:
                logger.info(f"üîç Query atualizada para sess√£o {session_id}: {new_query}")
                
                return {
                    'status': 'success',
                    'message': 'Query de busca atualizada com sucesso',
                    'session_id': session_id,
                    'new_query': new_query,
                    'previous_query': session_manager.get_status(session_id).get('query', '')
                }
            else:
                return {
                    'status': 'error',
                    'message': 'Falha ao atualizar query'
                }
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao atualizar query da sess√£o {session_id}: {e}")
            return {
                'status': 'error',
                'message': str(e)
            }

    def list_session_files(self, session_id: str) -> Dict[str, Any]:
        """
        Lista todos os arquivos dispon√≠veis na sess√£o.
        
        Args:
            session_id: ID da sess√£o
            
        Returns:
            Dicion√°rio com lista de arquivos
        """
        try:
            session_dir = session_manager.get_session_directory(session_id)
            if not session_dir:
                return {
                    'status': 'error',
                    'message': f'Sess√£o {session_id} n√£o encontrada'
                }
            
            if not os.path.exists(session_dir):
                return {
                    'status': 'error',
                    'message': 'Diret√≥rio da sess√£o n√£o existe'
                }
            
            files = []
            for item in os.listdir(session_dir):
                item_path = os.path.join(session_dir, item)
                if os.path.isfile(item_path):
                    file_info = {
                        'name': item,
                        'size': os.path.getsize(item_path),
                        'modified': datetime.fromtimestamp(os.path.getmtime(item_path)).isoformat(),
                        'extension': os.path.splitext(item)[1].lower()
                    }
                    files.append(file_info)
            
            # Ordena por data de modifica√ß√£o (mais recente primeiro)
            files.sort(key=lambda x: x['modified'], reverse=True)
            
            return {
                'status': 'success',
                'files': files,
                'total_files': len(files),
                'session_id': session_id,
                'session_directory': session_dir
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao listar arquivos da sess√£o {session_id}: {e}")
            return {
                'status': 'error',
                'message': str(e)
            }

    def get_analysis_summary(self, session_id: str) -> Dict[str, Any]:
        """
        Retorna um resumo da an√°lise em andamento ou conclu√≠da.
        
        Args:
            session_id: ID da sess√£o
            
        Returns:
            Dicion√°rio com resumo da an√°lise
        """
        try:
            session_status = session_manager.get_status(session_id)
            if not session_status:
                return {
                    'status': 'error',
                    'message': f'Sess√£o {session_id} n√£o encontrada'
                }
            
            # Busca por arquivo de relat√≥rio
            session_dir = session_manager.get_session_directory(session_id)
            report_files = []
            
            if session_dir and os.path.exists(session_dir):
                for file in os.listdir(session_dir):
                    if any(keyword in file.lower() for keyword in ['report', 'summary', 'analysis', 'resultado']):
                        report_files.append(file)
            
            summary = {
                'session_id': session_id,
                'status': session_status.get('status'),
                'query': session_status.get('query', ''),
                'created_at': session_status.get('created_at'),
                'updated_at': session_status.get('updated_at'),
                'progress': session_status.get('analysis_progress', {}),
                'total_errors': len(session_status.get('error_log', [])),
                'report_files': report_files,
                'module_results': session_status.get('module_results', {})
            }
            
            return {
                'status': 'success',
                'summary': summary
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao obter resumo da an√°lise {session_id}: {e}")
            return {
                'status': 'error',
                'message': str(e)
            }

    def _is_safe_filename(self, filename: str) -> bool:
        """
        Valida se o nome do arquivo √© seguro (evita directory traversal).
        
        Args:
            filename: Nome do arquivo
            
        Returns:
            bool: True se seguro
        """
        # Caracteres e padr√µes proibidos
        forbidden_chars = ['..', '/', '\\', ':', '*', '?', '"', '<', '>', '|']
        forbidden_names = ['CON', 'PRN', 'AUX', 'NUL'] + [f'COM{i}' for i in range(1, 10)] + [f'LPT{i}' for i in range(1, 10)]
        
        # Verifica caracteres proibidos
        for char in forbidden_chars:
            if char in filename:
                return False
        
        # Verifica nomes reservados (Windows)
        base_name = os.path.splitext(filename)[0].upper()
        if base_name in forbidden_names:
            return False
        
        # Verifica se n√£o √© vazio e n√£o come√ßa/termina com espa√ßo ou ponto
        if not filename or filename.startswith('.') or filename.startswith(' ') or filename.endswith(' '):
            return False
        
        return True

    def _is_path_within_session(self, file_path: str, session_dir: str) -> bool:
        """
        Verifica se o caminho do arquivo est√° dentro do diret√≥rio da sess√£o.
        
        Args:
            file_path: Caminho do arquivo
            session_dir: Diret√≥rio da sess√£o
            
        Returns:
            bool: True se dentro do diret√≥rio
        """
        try:
            # Resolve caminhos absolutos
            abs_file_path = os.path.abspath(file_path)
            abs_session_dir = os.path.abspath(session_dir)
            
            # Verifica se o arquivo est√° dentro do diret√≥rio da sess√£o
            return abs_file_path.startswith(abs_session_dir)
            
        except Exception:
            return False

    def _check_system_health(self) -> Dict[str, Any]:
        """
        Verifica a sa√∫de geral do sistema.
        
        Returns:
            Dicion√°rio com informa√ß√µes de sa√∫de
        """
        try:
            health = {
                'analyses_directory_exists': os.path.exists(self.analyses_base_dir),
                'analyses_directory_writable': os.access(self.analyses_base_dir, os.W_OK),
                'total_sessions': len(session_manager.list_sessions()),
                'active_sessions': len(session_manager.list_sessions('running')),
                'paused_sessions': len(session_manager.list_sessions('paused')),
                'timestamp': datetime.now().isoformat()
            }
            
            # Verifica espa√ßo em disco
            try:
                statvfs = os.statvfs(self.analyses_base_dir)
                free_space_gb = (statvfs.f_frsize * statvfs.f_bavail) / (1024**3)
                health['free_disk_space_gb'] = round(free_space_gb, 2)
                health['disk_space_adequate'] = free_space_gb > 1.0  # Pelo menos 1GB livre
            except:
                health['free_disk_space_gb'] = 'unknown'
                health['disk_space_adequate'] = True
            
            return health
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao verificar sa√∫de do sistema: {e}")
            return {
                'status': 'error',
                'message': str(e)
            }

# Inst√¢ncia global das ferramentas do agente
agent_tools = AgentTools()